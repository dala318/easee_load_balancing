blueprint:
  domain: automation
  name: Easee Load Balancing
  description: This automation adapts the Easee circut limits based on house consumption.
  source_url: https://github.com/dala318/easee_load_balancing/blob/main/easee_load_balancing.yaml
  input:
    ichargerstatus:
      name: Charger status
      description: 'The Easee status (the one ending with _status).'
      selector:
        entity:
          domain: sensor
          multiple: false
    ichargercircuitlimit:
      name: Charger dynamic circuit limit
      description: 'The Easee limit (the one ending with _dynamic_circuit_limit), it may have to be manualy enabled.'
      selector:
        entity:
          domain: sensor
          multiple: false
    iphase1:
      name: Mains phase 1 current sensor
      description: 'Make sure it is the phase that Easee uses as phase 1'
      selector:
        entity:
          domain: sensor
          device_class: current
          multiple: false
    iphase2:
      name: Mains phase 2 current sensor
      description: 'Make sure it is the phase that Easee uses as phase 2'
      selector:
        entity:
          domain: sensor
          device_class: current
          multiple: false
    iphase3:
      name: Mains phase 3 current sensor
      description: 'Make sure it is the phase that Easee uses as phase 3'
      selector:
        entity:
          domain: sensor
          device_class: current
          multiple: false
    idecreaseabove:
      name: 'Reduce allowed current on phase if total consumption on phase is above'
      description: 'Should be set to main fuse capacity or slightly below.'
      selector:
        number:
          min: 0.0
          max: 40.0
          step: 1.0
          unit_of_measurement: ampere
          mode: slider
      default: 20
    imaxallowed:
      name: 'Maximum allowed current per phase on charger'
      description: 'Regardless of total consumption the allowed current per phase will not increase beyond this value'
      selector:
        number:
          min: 6.0
          max: 40.0
          step: 1.0
          unit_of_measurement: ampere
          mode: slider
      default: 16
triggers:
  - trigger: state
    entity_id:
      - !input iphase1
      - !input iphase2
      - !input iphase3
conditions:
  - condition: state
    entity_id: !input ichargerstatus
    state: charging
action:
  - service: easee.set_circuit_dynamic_limit
    data:
      charger_id: "{{ state_attr(entChargerStatus,'id') }}"
      current_p1: >-
        {% set C1 = states(entPhase1) | int() %}
        {% set C1_diff = valDecreaseAbove - C1 %}
        {% set L1 = state_attr(entChargerLimit, "state_dynamicCircuitCurrentP1") %}
        {% set L1_new = L1 + C1_diff %}
        {% set L1_new_cap = [[L1_new, valMaxAllowed] | min, 0] | max %}
        {{ L1_new_cap}}
      current_p2: >-
        {% set C2 = states(entPhase2) | int() %}
        {% set C2_diff = valDecreaseAbove - C2 %}
        {% set L2 = state_attr(entChargerLimit, "state_dynamicCircuitCurrentP2") %}
        {% set L2_new = L2 + C2_diff %}
        {% set L2_new_cap = [[L2_new, valMaxAllowed] | min, 0] | max %}
        {{ L2_new_cap}}
      current_p3: >-
        {% set C3 = states(entPhase3) | int() %}
        {% set C3_diff = valDecreaseAbove - C3 %}
        {% set L3 = state_attr(entChargerLimit, "state_dynamicCircuitCurrentP3") %}
        {% set L3_new = L3 + C3_diff %}
        {% set L3_new_cap = [[L3_new, valMaxAllowed] | min, 0] | max %}
        {{ L3_new_cap}}
      time_to_live: 10
variables:
  entChargerStatus: !input ichargerstatus
  entChargerLimit: !input ichargercircuitlimit
  entPhase1: !input iphase1
  entPhase2: !input iphase2
  entPhase3: !input iphase3
  valDecreaseAbove: !input idecreaseabove
  valMaxAllowed: !input imaxallowed
mode: single
max_exceeded: silent
